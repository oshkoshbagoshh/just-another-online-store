-- Active: 1695684148419@@127.0.0.1@3306@justanotheronlinestore_db
/*
 * @Author: AJ Javadi
 * @Email: amirjavadi25@gmail.com
 * @Date: 2023-12-17 17:57:42
 * @Last Modified by:   Someone
 * @Last Modified time: yyyy-12-dd 20:46:43
 * @Description: file:///Users/aj/sandbox/just-another-online-store/zzAJ/notes.txt
 */

=========
TODO:

- add google trends RSS feed data
- Incorporate reviews
- Recommender system
- ratings
- Site design
- packagist
- stripe integration
- Vue
- Faker
- Third Party Packages
- unsplash API
- display random
- coupon functionality (lucky chance you get a coupoun code )
- SVG
- wavy
- admin image
- prof pic
- link to LinkTree
- updated to the newest version of laravel and bootstrap
- coupons.js








===========

Laravel Routing

======

Laravel Controllers

=======

Chapter 7 - Refactoring


- refactored so we can now access the data
through the single viewData associative array this makes views way more consistent


=====

Chapter 8 -  Use of a coding standard
`
* PSR-2

* PHP Code sniffer

=======

Chapter 9 - Using Dummy Data to fill the database

=======

Chapter 10 - Configuration of MySQL database

CREATE DATABASE onlinestore;
USE DATABASE onlinestore;
===========

Chapter 11 - Product Migration

php artisan make:migration create_products_table


===========

Chapter 12 - Product Model / Eloquent


======

Chapter 13 - List Products with Database data

- refactored product model.
- replaced dummy data with database data using Eloquent model
- Note: using the FindOrFail could throw a Model not found Exception (like when passing through an invalid ID).
- If this happens, then a 404 HTTP response code is automatically sent back to the client

======

Chapter 14 - Refactoring List Products

- we decclare the model's attributes in the form of $this->atrrributes['id']. This is because laravelEloquent stores the models's attributes in a class array called $attribues
- we can access it in 2 ways:

$product = Product::findOrFail(1);
1. echo $product->name; // prints the product's name using object style
2. echo $product['name'] // prints the product's name, but using associative array

- instead of using those two ways, we use something called getters and setters. We are currently using associative array but are going to refactor it
- the reason this is not maintainable is because if you later have to change it (example: boss says we need to change all product names to Upper case, we now must now find all instances of this and use  strtoupper($product["name"] across many places ))
- this is why we use getters and setters

============


Chapter 15 - Admin Panel


- Created route, controller, and view for /admin page

- extended the basic layouts but made a new directory called admin with a index in it

- added GET routes in the web.php file

- tested and works, but need to restrict access to it so that only those that are authorized can access it



========

Chapter 16 - List Products in Admin Panel

- new route of  /admin/products will be the entry point to manage our products

- used bootstrap to create a table element that displays for all of the products

==========

Chapter 17 - Create Products

- focus on the admin panel system to create products
- /admin/products/store route will collect and store the newly created products data using a post HTTP request using a form with the controller method
- in the AdminProductController.php file we create use a store function to receive a $request object which allows us to interact with the HTTP requeast handled by our app. This allows us to receive the inputs, cookies, and files from the request
- then we use the validate method provided by the $request object. If the validation rules pass it keeps going, otherwise it will throw an Exception
- TODO: check out the available validation rules in the docs
- then we create a newProduct instance and set the newProduct attributes based on values collected from the form.
- then, we invoke the save method, which inserts the object into the database
- NOTE: you can also use the HTML required attribute on the form for fields you need, but we don't need that since we're using Laravel's validations
- TODO: check out advanced version with hasSetMutator and setMutatedAttributes git repo

======

Chapter 18 - Create Products with Images

-  storage class with set of methods
- need to create a symbolic link to make the files accessible on the web
- once we run the app, the users an only access files inside the public/ folder.

=============

Chapter 19 - Edit and Delete Products


- through the admin panel, we edited our form to create two new buttons (using bootstrap icons library)
- the delete button is tied to a DELETE HTTP route in the controller
- edit button takes the user to another view where they can fill out another form that uses HTTP PUT requests to update / edit the data
- NOTE: there is a default upload limit of 2MB so you have to update that in your php.ini file, or make sure to use images under 2MB
- TODO: add in a note letting the user know about that
=============

Chapter 20 - Refactoring Validations

- move the duplicated controller validations to a single place. Place them inside a static method called validate inside our Product model class.
- always try to move your model validations away from controllers


=====

Chapter 21 - Login system

- breeze is laravels auth system but for now we will just use larevel/ui
- we also install the ui bootstrap --auth which comes with some auth controllers and some views like for logging in and registering users

=========

Chapter 22 - Refactoring User

- successfuly implemented login system and now we will make changes to the User model to improve the store application and manage user roles
- need to alter the user migration by using artisan
- we add two columns to the users table. Role (default is client), but admins will be able to access the Admin Panel. Balance will store the users balance which we will use for purchase functionality
- to actually execute the migration we run php artisan migrate
- Lesson learned: be careful with migrations as it can cause problems if you try to make the same table again twice.
- we ran into an issue since we updated the user model to require a balance when registering, but since we don't have a form for them to enter that in it gave us an issue, so I had to go into the model and add that in the insert statement so all users have it from the start but its not required.
- by default, users are 'client', so they can't access the admin panel so what we did is use "tinker" which is laravels command line tool / shell and manually created a new user with the role of admin.
- later on, I will implement Faker to automatically generate fake users and products.
- TODO: need to re-create products with proper images

===============
Chapter 23 - AdminAuthMiddleware

- we want to restrict access to the admin panel for just admins. We can use gates and policies but instead we're going to use Laravel Middleware.
- this provides a convenient mechanism for inspecting and filtering HTTP requests entering the app.
- ex: Laravel includes a midleware that verifies your app's user is authenticated and if not, the middleware will redirect the user to the login screen, but if they are authenticated, the middleware will alow the request to proceed further

============

Chapter 24 - Introduction to Web Session

- HTTP has some limitations, as it is a stateless protocol, meaning that the server does not keep any data(state) between two requests.
- in HTTP, every request creates a new connection, and each new request knows nothing about prior requests. It holds no state data
- Yet, how does the application know if you are logged in or logged out or already registed? Laravel increases the HTTP protocol capabilities using Laravel sessios

- Larevel sessions provide a way to store information about the user across multiple requests.
- User info is typically placed in a persistent store that can be accessed form subsequent requests.
- By default, laravel uses a file session driver. This driver stores the session data in files inside the storage/framework/sessions folder
-  example: a user goes to the home page and laravel checks if its the first time the user accesses the application, if true it generates a sessio id for the user and also created a new file linked to the generated session id. Laravel stores the user state data in the previous file. it then sends an HTTP response to the user with the home page (with corresponding HTML, CSS, and JavaScript code) which is rendered in the browser. Laravel sends the session id inside the HTTP response. The session id will be stored inside a cookie (called laravel_session) in the user browser. The user browser will send the cookie info (session id) in subsequent user requests to the server. now when the user goes to the login page, Laravel senda an HTTP request with the login form and once completed, Laravel updates the session id for for logged user which is logged in the laravel_session cookie in the user browser. Finally, Laravel redirects the user to the home page. Since the user is logged in, it displays the logout button. All subsequent requests will display this because the corresponding session file contains the keys indicating the user is logged in. It works this way until eithr the user logs out (which generates a new session file and a new session id), or until the session expires (which is 120 minutes by default)

- sessions can also be used to save tokens, last page visited by the user, and even products added to the cart. It's good for storing temp data that you don't need to keep permanently

==============

Chapter 25 - Shopping Cart

- create a cart controller where we add the products stored in the session throught request-> session->get("products") and it's quantity so we can later calculate the total
- add in a button for delete and empty items from cart
- we add in a new static method in the products model that takes the sumPricesByQuantities
- we add three new routes: cart.index, cart.delete, cart.add
- we add a nav link to cart.index
- we add a form for "add to cart"
=======

Chapter 26 - Orders and Items

- for Orders, we need to store Id, Date, Total, User id, User name
- Ordes are composed of items, so for each item we need to store:
- Quantity, Product id, Product name, Price, Item Id
- to make the order migration, run:

php artisan make: migration create_orders_table

- then we will update the database/migrations/ file

- then we set up a foreign key for the user_id column of the users table

- now we create an item migration with two foreign ids. One order_id on orders and another product id on products

===============

Chapter 27 - Product Purchase

- create a cart/purchase route, which is only available for authenticated users.
- we modify the cart/index view to show a route if the number of products is greater than 0
- we define the purchase method that is the most complex
- first, we check to see if the user has products in session. If not, we redirect them to the cart.index route. If there are products, we create an Order with the logged user id,
- and a purchase total of 0 (we will update later). We create this Order because we need to access the order ID to create items.
- then, we iterate through the productsInCart. For each product in productsInCart, we create a new item, set the corresponding quantiy (based on the values stored in the session), price,
- price id, and order id, then we save the item and update the total value
- then we update the order total and save it. Then we calculate and set the new user's balance. We then remove the products in session, and show the cart.purchase view with the order
- TODO: need to add verification on if the user has enough money to purchase

==============

Chapter 28 - Orders page

- creating a page where users can list their orders
- we create a new route for "my-account/orders", and a nav link there
- then we create a MyAccountController.php file that uses an orders method to collect the orders based on the authenticated user id and displays the myaccount.orders view (which we need to create)
- we use a @forelse loop in the view to allow us to define an empty message in case the user doesn't have any orders so that we can display a messaging saying "no orders found"
- then we have a second @foreach when we iterate through the items of each order using the getitems() method and access the product properties of each item using the getProduct() method and display the product name and link to the product.
- we are easily accessing order relationships ($item->getProduct()->getName() which shows the power of Eloquent relationships
- ex:

Product::where('name', 'iPhone')->first()->getItems()[0]->getOrder()->getUser()->getName();

- Lazy loading vs. eager loading:

- the silent cost of Eloquent relationships is that the related models are "lazy loaded" when we access the Eloquent relationships as attributes which means the relationship data is not loaded until you first access the attribute.
- For example, if we have 10 orders , in our orders blade template we have a @forelse which iterates through each order and extracts the corresponding items and since Eloquent uses lazy loading,
for each order, laravel will make an extra database query to collect the information of the items related to each order (another 10 queries). And since we are extracting the product name of each item, will execute another 10, so in this scenario it would execute at least 21 queries to show the orders page (which impacts our app performance)

- luckily, with "eager loading", Eloquent can reduce the number of relationships using the "with" method

- install a laravel debug bar to help show the difference between lazy loading and eager loading
composer require barryvdh/laravel-debugbar --dev




----

2024-01-13 00:11:39

Stripe Keys:

Public:
pk_test_51NYu1ML9zoTSpcm6Fcd59ksXDkyeqil9Aguc2LZrC1aTkgms0547oiV1SAkf8qxguUiersmOGHQjNh9cRQwZAjMA00SXygeYKO

Test:
sk_test_51NYu1ML9zoTSpcm6sVsbV0s9VyYo3bZD9rj1ke8qODPi3UlfU4EALwXF9qG210XBNDt4haPq4fF7UyCxwXaLjd6Z00Hir7X8Y7
