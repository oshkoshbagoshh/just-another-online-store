-- Active: 1695684148419@@127.0.0.1@3306@justanotheronlinestore_db
/*
 * @Author: AJ Javadi
 * @Email: amirjavadi25@gmail.com
 * @Date: 2023-12-17 17:57:42
 * @Last Modified by:   Someone
 * @Last Modified time: yyyy-12-dd 20:46:43
 * @Description: file:///Users/aj/sandbox/just-another-online-store/zzAJ/notes.txt
 */

=========
TODO:

- add google trends RSS feed data
- Incorporate reviews
- Recommender system
- ratings
- Site design
- packagist
- stripe integration
- Vue
- Faker
- Third Party Packages
- unsplash API
- display random
- coupon functionality (lucky chance you get a coupoun code )
- SVG
- wavy
- admin image
- prof pic
- link to LinkTree
- updated to the newest version of laravel and bootstrap
- coupons.js








===========

Laravel Routing

======

Laravel Controllers


=======

Chapter 7 - Refactoring


- refactored so we can now access the data
through the single viewData associative array this makes views way more consistent

- TODO: localization




=====

Chapter 8 -  Use of a coding standard

* PSR-2

* PHP Code sniffer

=======

Chapter 9 - Using Dummy Data to fill the database

=======

Chapter 10 - Configuration of MySQL database

CREATE DATABASE onlinestore;
USE DATABASE onlinestore;
===========

Chapter 11 - Product Migration

php artisan make:migration create_products_table


===========

Chapter 12 - Product Model / Eloquent


======

Chapter 13 - List Products with Database data

- refactored product model.
- replaced dummy data with database data using Eloquent model
- Note: using the FindOrFail could throw a Model not found Exception (like when passing through an invalid ID).
- If this happens, then a 404 HTTP response code is automatically sent back to the client

======

Chapter 14 - Refactoring List Products

- we decclare the model's attributes in the form of $this->atrrributes['id']. This is because laravelEloquent stores the models's attributes in a class array called $attribues
- we can access it in 2 ways:

$product = Product::findOrFail(1);
1. echo $product->name; // prints the product's name using object style
2. echo $product['name'] // prints the product's name, but using associative array

- instead of using those two ways, we use something called getters and setters. We are currently using associative array but are going to refactor it
- the reason this is not maintainable is because if you later have to change it (example: boss says we need to change all product names to Upper case, we now must now find all instances of this and use  strtoupper($product["name"] across many places ))
- this is why we use getters and setters

============


Chapter 15 - Admin Panel


- Created route, controller, and view for /admin page

- extended the basic layouts but made a new directory called admin with a index in it

- added GET routes in the web.php file

- tested and works, but need to restrict access to it so that only those that are authorized can access it



========

Chapter 16 - List Products in Admin Panel

- new route of  /admin/products will be the entry point to manage our products

- used bootstrap to create a table element that displays for all of the products

==========

Chapter 17 - Create Products

- focus on the admin panel system to create products
- /admin/products/store route will collect and store the newly created products data using a post HTTP request using a form with the controller method
- in the AdminProductController.php file we create use a store function to receive a $request object which allows us to interact with the HTTP requeast handled by our app. This allows us to receive the inputs, cookies, and files from the request
- then we use the validate method provided by the $request object. If the validation rules pass it keeps going, otherwise it will throw an Exception
- TODO: check out the available validation rules in the docs
- then we create a newProduct instance and set the newProduct attributes based on values collected from the form.
- then, we invoke the save method, which inserts the object into the database
- NOTE: you can also use the HTML required attribute on the form for fields you need, but we don't need that since we're using Laravel's validations
- TODO: check out advanced version with hasSetMutator and setMutatedAttributes git repo

======

Chapter 18 - Create Products with Images

-  storage class with set of methods
- need to create a symbolic link to make the files accessible on the web
- once we run the app, the users an only access files inside the public/ folder.

=============

Chapter 19 - Edit and Delete Products


